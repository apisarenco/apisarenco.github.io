{"categories":[{"title":"Development","uri":"https://apisarenco.github.io/categories/development/"}],"posts":[{"content":"I saw the github pages of Conor Lamb and he had a nice guide there highlighting the \u0026ldquo;easy\u0026rdquo; steps in setting up a \u0026ldquo;modern\u0026rdquo;, \u0026ldquo;not outdated\u0026rdquo; type of \u0026ldquo;blog\u0026rdquo;. Jokes aside, there\u0026rsquo;s a reason why I decided to do it as well. Thanks Conor Lamb for the guide. It kinda helped! üëç\nWhat\u0026rsquo;s Hugo? Hugo is a static website generator that takes a theme, a list of markdown files, and some config and static content and makes it kiss and make a baby which is this site you\u0026rsquo;re reading now.\nWhat\u0026rsquo;s github pages Ever seen one of those \u0026ldquo;something.github.io\u0026rdquo; websites? Well, apparently, if you:\n Create a repository in your github account titled \u0026lt;your account id\u0026gt;.github.io Go to repository settings and configure github pages for this repository Slap some files in it BAM!  There is a build pipeline happening, and the contents of your repository get displayed as a website.\nPicking a theme This small step was actually harder than it sounds. A theme is what people see first, so it has to be:\n Easy to read. There are plenty of aggressive themes with hard to read fonts or too high contrast. Tuned for my use case. If I\u0026rsquo;m gonna write anything, it\u0026rsquo;s going to involve code, diagrams, maybe charts. Uncluttered. The last thing I need is extra large bars at the top of code blocks that seem like code. Pretty. It \u0026hellip; has to work. My first attempt was a disaster. License. Almost forgot about that one. I want my content to be of a permissive license. Some of the themes I looked at were GPL family, and I\u0026rsquo;m no laywer, but I don\u0026rsquo;t want to get involved with having to have license issues as I use MIT, BSD, CC or WTFPL.  I could\u0026rsquo;ve also made my own. Although I am already in my pyjamas.\nAutomated deployments If you do theme switching until you figure out what you want, you will have the trouble that I had:\nyour content is in the same place as the config\nManaging versions, revering them would be a pain. So I did 2 separate repos. One purely for content, and another one purely for configuration.\nIt builds a branch called build in the \u0026ldquo;content\u0026rdquo; repository, where all the static files are hosted, as soon as I update any content, or manually run the build.\nI\u0026rsquo;m still getting the hang of it, so here\u0026rsquo;s how it works so far:\nYou can add a definition in .github/workflows directory in your repository, and it will run when certain conditions are met. Here\u0026rsquo;s mine, for this automatic build. It basically does the following:\n Clones the configuration repo Clones the content repo, build branch Downloads the latest release of hugo, as a binary, copies content next to config, and runs the hugo command, and then copies the artifacts to the content directory Creates a commit with the changes and pushes it to build branch if there are any changes detected ","id":0,"section":"posts","summary":"\u003cp\u003eI saw the github pages of \u003ca href=\"https://conorcorp.github.io\"\u003eConor Lamb\u003c/a\u003e and he had a nice guide there highlighting the \u0026ldquo;easy\u0026rdquo; steps in setting up a \u0026ldquo;modern\u0026rdquo;, \u0026ldquo;not outdated\u0026rdquo; type of \u0026ldquo;blog\u0026rdquo;. Jokes aside, there\u0026rsquo;s a reason why I decided to do it as well. Thanks Conor Lamb for the guide. It kinda helped! üëç\u003c/p\u003e","tags":["hugo","this"],"title":"Making github pages with hugo","uri":"https://apisarenco.github.io/2022/01/hugo-pages/","year":"2022"}],"tags":[{"title":"hugo","uri":"https://apisarenco.github.io/tags/hugo/"},{"title":"this","uri":"https://apisarenco.github.io/tags/this/"}]}