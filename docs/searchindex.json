{"categories":[{"title":"Data","uri":"https://alex.lundas.net/categories/data/"},{"title":"Development","uri":"https://alex.lundas.net/categories/development/"}],"posts":[{"content":"I started off my career in data with relational databases. 18 years ago I\u0026rsquo;ve read 10 pages on how to use Microsoft Access, and my eyes sparkled with enthusiasm, as I was imagining how most of the problems that I, as a \u0026ldquo;techy boy\u0026rdquo; encountered at different people who were using mostly Excel for things that it wasn\u0026rsquo;t designed to do.\nThis quickly turned into a 3-month project, where I, an 18 year old teenager, replaced one of the most labour-intensive and error-prone data entry tasks in Excel, with a new MS Access database + front-end and reporting. Decreased operation time from about 20h per month, to just 4h per month, with no need to retroactively fix wrong reports due to manual errors being discovered weeks after those reports were printed and signed.\nIt is in use to this very day 18 years later. There is an IT department which takes care that MS Access works properly on each machine that they manage. I would be horrified today at the code that I wrote then, and how I wrote it. But it works. And nothing has replaced it. It is a reliable, final project.\nThis event shaped my career. It taught me very early and very quickly that as soon as you define your schema, and validate your data according to consistency rules, things will just work down the line. Back then I didn\u0026rsquo;t even understand these words by the way.\nExcel is not a database It also doesn\u0026rsquo;t have any schema. Despite it representing tabular data, it is as far away from relational databases as MongoDB would be.\nAs a data engineer I\u0026rsquo;ve had to automate a ton of businesses and departments which were getting swamped by Excel, which wasn\u0026rsquo;t good at reliably producing the same reports as before.\nIt always starts off with this:\nExcel is easy! I\u0026rsquo;ll just put some data here and there and everywhere, as there\u0026rsquo;s no schema, no constraints, I can do what I want.\nDoes that sound familiar?\nGIGO \u0026hellip; or as my partner-in-crime likes to say: \u0026ldquo;Shit goes in, fancy shit goes out\u0026rdquo;. If at the point of ingress you\u0026rsquo;re already getting really bad data, that doesn\u0026rsquo;t conform to a fairly strict schema, the majority of the work is going to be in fitting it into some schema.\nThe modern \u0026ldquo;schemaless\u0026rdquo; approach Same as the situation described above with Excel, some software developers will be tempted to start developing software without any thought to schema.\nI\u0026rsquo;ll just persist whatever data I have\n\u0026hellip; said the developer. Without having to worry about schema definition, schema changes and migrations, the developer adds the data.\nThe journey begins\u0026hellip;\nv1:\n{ \u0026quot;name\u0026quot;: \u0026quot;Joe Flannigan\u0026quot; } Bob decides to also keep first name and last name, but keeps name for backwards compatibility.\nv2:\n{ \u0026quot;name\u0026quot;: \u0026quot;Joe Flannigan\u0026quot;, \u0026quot;firstName\u0026quot;: \u0026quot;Joe\u0026quot;, \u0026quot;lastName\u0026quot;: \u0026quot;Flannigan\u0026quot; } Uwe thinks that it would be nice to have e-mail there as well, as long with other personal data:\nv3:\n{ \u0026quot;name\u0026quot;: \u0026quot;Marry Flannigan\u0026quot;, \u0026quot;firstName\u0026quot;: \u0026quot;Marry\u0026quot;, \u0026quot;lastName\u0026quot;: \u0026quot;Flannigan\u0026quot;, \u0026quot;personalDetails\u0026quot;: { \u0026quot;email\u0026quot;: \u0026quot;marry-flannigan@email.corp\u0026quot;, \u0026quot;birthday\u0026quot;: \u0026quot;2003-05-26\u0026quot;, \u0026quot;gender\u0026quot;: \u0026quot;other\u0026quot;, \u0026quot;address\u0026quot;: { \u0026quot;streetName\u0026quot;: \u0026quot;14th street\u0026quot;, \u0026quot;houseNumber\u0026quot;: \u0026quot;4\u0026quot;, \u0026quot;unit\u0026quot;: \u0026quot;16\u0026quot; } } } Charlotte thinks that address shouldn\u0026rsquo;t be part of the person details, so she changes it to a reference, because she\u0026rsquo;s also aware that in other databases people use Foreign Keys. Also she removes name because it\u0026rsquo;s already possible to deduce it from firstName and lastName.\nv4:\n{ \u0026quot;firstName\u0026quot;: \u0026quot;Marry\u0026quot;, \u0026quot;lastName\u0026quot;: \u0026quot;Flannigan\u0026quot;, \u0026quot;personalDetails\u0026quot;: { \u0026quot;email\u0026quot;: \u0026quot;marry-flannigan@email.corp\u0026quot;, \u0026quot;birthday\u0026quot;: \u0026quot;2003-05-26\u0026quot;, \u0026quot;gender\u0026quot;: \u0026quot;other\u0026quot;, \u0026quot;addressId\u0026quot;: \u0026quot;01234567-0123-0123-0123-012345678901\u0026quot; } } But now, everybody is screwed.\nv1 to v3 consumers may rely on name being present. They could update their apps to use firstName and lastName, but older data doesn\u0026rsquo;t have those fields, and there\u0026rsquo;s no schema migration script to change it, since there\u0026rsquo;s no schema. v3 relied on address being specified per-person. Writing migration code to get from v3 to v4 without data loss would be an undertaking. The reality is that all of the data products involved with this are going to have to carry legacy code to deal with legacy \u0026ldquo;schema\u0026rdquo; that was never intended to be a schema.\nThere will probably be hardcoded classes which will map mandatory fields in these documents, and will ensure that every value corresponds to validation rules and that lookups work.\nThere will be custom code that changes every entity one by one, with no regard to locking the record before changing it.\nJust \u0026hellip; admit it, there is a schema. The problem is that its acknowledgement was avoided, and thus it created technical debt.\nSo what\u0026rsquo;s the solution? Well, sorry for sounding boring, but RDBMS is the proven solution. I\u0026rsquo;m not saying that you should be stuck in the 80s way of doing things. You can start off with nothing, with just a simple schema, and transition from there.\nMake sure that every schema change is documented through a script that does this change, and brings it from v1 to v2 for example.\nthe data will all have the exact same structure, old and new any structure changes that disagree with the data, will not be possible. You won\u0026rsquo;t get errors down the line, you\u0026rsquo;ll see them immediately the history of the schema changes is recorded in version control you can trust the data that is constrained to a schema. There are no surprises You don\u0026rsquo;t even have to do any of this manually, and likely you don\u0026rsquo;t even have to write a single line of SQL. With modern ORMs, you just focus on the code.\nSince I avoid working with ORMs, I don\u0026rsquo;t know too much about the infrastructure, but the last time I did have to work with Alembic for Flask, in Python. And it did exactly what I described, reliably and well. There\u0026rsquo;s similar frameworks in most platforms, as my 2-minute search showed in the case of .NET Core.\nAcknowledge and document the data schema at the software architecture level, and you\u0026rsquo;ll have a much smoother application development experience.\n","id":0,"section":"posts","summary":"I started off my career in data with relational databases. 18 years ago I\u0026rsquo;ve read 10 pages on how to use Microsoft Access, and my eyes sparkled with enthusiasm, as I was imagining how most of the problems that I, as a \u0026ldquo;techy boy\u0026rdquo; encountered at different people who were using mostly Excel for things that it wasn\u0026rsquo;t designed to do.\nThis quickly turned into a 3-month project, where I, an 18 year old teenager, replaced one of the most labour-intensive and error-prone data entry tasks in Excel, with a new MS Access database + front-end and reporting.","tags":["data","schema","nosql"],"title":"Data Schema For The Win","uri":"https://alex.lundas.net/2022/08/data-schema-for-the-win/","year":"2022"},{"content":"I saw the github pages of Conor Lamb and he had a nice guide there highlighting the \u0026ldquo;easy\u0026rdquo; steps in setting up a \u0026ldquo;modern\u0026rdquo;, \u0026ldquo;not outdated\u0026rdquo; type of \u0026ldquo;blog\u0026rdquo;. Jokes aside, there\u0026rsquo;s a reason why I decided to do it as well. Thanks Conor Lamb for the guide. It kinda helped! üëç\nWhat\u0026rsquo;s Hugo? Hugo is a static website generator that takes a theme, a list of markdown files, and some config and static content and makes it kiss and make a baby which is this site you\u0026rsquo;re reading now.\nWhat\u0026rsquo;s github pages Ever seen one of those \u0026ldquo;something.github.io\u0026rdquo; websites? Well, apparently, if you:\nCreate a repository in your github account titled \u0026lt;your account id\u0026gt;.github.io Go to repository settings and configure github pages for this repository Slap some files in it BAM! There is a build pipeline happening, and the contents of your repository get displayed as a website.\nPicking a theme This small step was actually harder than it sounds. A theme is what people see first, so it has to be:\nEasy to read. There are plenty of aggressive themes with hard to read fonts or too high contrast. Tuned for my use case. If I\u0026rsquo;m gonna write anything, it\u0026rsquo;s going to involve code, diagrams, maybe charts. Uncluttered. The last thing I need is extra large bars at the top of code blocks that seem like code. Pretty. It \u0026hellip; has to work. My first attempt was a disaster. License. Almost forgot about that one. I want my content to be of a permissive license. Some of the themes I looked at were GPL family, and I\u0026rsquo;m no laywer, but I don\u0026rsquo;t want to get involved with having to have license issues as I use MIT, BSD, CC or WTFPL. I could\u0026rsquo;ve also made my own. Although I am already in my pyjamas.\nAutomated deployments If you do theme switching until you figure out what you want, you will have the trouble that I had:\nyour content is in the same place as the config\nManaging versions, revering them would be a pain. So I did 2 separate repos. One purely for content, and another one purely for configuration.\nIt builds a branch called build in the \u0026ldquo;content\u0026rdquo; repository, where all the static files are hosted, as soon as I update any content, or manually run the build.\nI\u0026rsquo;m still getting the hang of it, so here\u0026rsquo;s how it works so far:\nYou can add a definition in .github/workflows directory in your repository, and it will run when certain conditions are met. Here\u0026rsquo;s mine, for this automatic build. It basically does the following:\nClones the configuration repo Clones the content repo Clones the build branch of the content repo separately Downloads the latest release of hugo, as a binary, copies content next to config, and runs the hugo command, and then copies the artifacts to the build directory Creates a commit with the changes and pushes it to build branch if there are any changes detected The reason for a separate content and build directories from the same repository is that content is read-only, and I always get the freshest copy, while build is write-only, and will see incremental updates, trackable in git, to the conte that it manages, without any merge conflicts.\n","id":1,"section":"posts","summary":"\u003cp\u003eI saw the github pages of \u003ca href=\"https://conorcorp.github.io\"\u003eConor Lamb\u003c/a\u003e and he had a nice guide there highlighting the \u0026ldquo;easy\u0026rdquo; steps in setting up a \u0026ldquo;modern\u0026rdquo;, \u0026ldquo;not outdated\u0026rdquo; type of \u0026ldquo;blog\u0026rdquo;. Jokes aside, there\u0026rsquo;s a reason why I decided to do it as well. Thanks Conor Lamb for the guide. It kinda helped! üëç\u003c/p\u003e","tags":["hugo","this"],"title":"Making github pages with hugo","uri":"https://alex.lundas.net/2022/01/hugo-pages/","year":"2022"}],"tags":[{"title":"data","uri":"https://alex.lundas.net/tags/data/"},{"title":"hugo","uri":"https://alex.lundas.net/tags/hugo/"},{"title":"nosql","uri":"https://alex.lundas.net/tags/nosql/"},{"title":"schema","uri":"https://alex.lundas.net/tags/schema/"},{"title":"this","uri":"https://alex.lundas.net/tags/this/"}]}